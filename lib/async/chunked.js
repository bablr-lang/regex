/* @macrome
 * @generatedby @macrome/generator-typescript
 * @generatedfrom ./chunked.ts#1649430422987
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
"use strict";
Object.defineProperty(exports, "__esModule", {
  value: true
});

Object.defineProperty(exports, "Pattern", {
  enumerable: true,

  get: function() {
    return _pattern.Pattern;
  }
});

(exports.execGlobal = (exports.exec = void 0));

Object.defineProperty(exports, "parse", {
  enumerable: true,

  get: function() {
    return _pattern.parse;
  }
});

(exports.test = void 0);
var _asyncPeekerate = _interopRequireDefault(require("iter-tools-es/methods/async-peekerate"));
var _peekerate = _interopRequireDefault(require("iter-tools-es/methods/peekerate"));
var _api = require("./api");
var _engine = require("../internal/engine");
var _utils = require("./internal/utils");

var _pattern = require("../pattern");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

const emptyPeekr = (0, _peekerate.default)([]);

const { exec, test, execGlobal } = new _api.AsyncApi(async function* generate(
  pattern,
  iterable,
) {
  const engine = new _engine.Engine(pattern);
  let chunkPeekr = await (0, _asyncPeekerate.default)((0, _utils.map)(iterable, _peekerate.default));
  let peekr = chunkPeekr.done ? emptyPeekr : chunkPeekr.value;
  let value;
  let done = false;

  try {
    engine.feed(null);

    while (peekr.done && !chunkPeekr.done) {
      chunkPeekr = await chunkPeekr.advance();
      peekr = chunkPeekr.done ? emptyPeekr : chunkPeekr.value;
    }

    try {
      while (!done && !peekr.done) {
        if (engine.width === 0) {
          engine.feed(peekr.value);

          ({ value, done } = engine.step0());
          yield* value;
        } else {
          engine.step1();

          peekr = peekr.advance();

          while (peekr.done && !chunkPeekr.done) {
            chunkPeekr = await chunkPeekr.advance();
            peekr = chunkPeekr.done ? emptyPeekr : chunkPeekr.value;
          }
        }
      }

      engine.feed(null);

      ({ value, done } = engine.step0());
      yield* value;
    } finally {
      peekr.return();
    }
  } finally {
    await chunkPeekr.return();
  }
});

exports.execGlobal = execGlobal;
exports.test = test;
exports.exec = exec;
