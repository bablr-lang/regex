/* @macrome
 * @generatedby @macrome/generator-typescript
 * @generatedfrom ./index.ts#1666026782576
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
"use strict";
Object.defineProperty(exports, "__esModule", {
  value: true
});

Object.defineProperty(exports, "Pattern", {
  enumerable: true,

  get: function() {
    return _pattern.Pattern;
  }
});

(exports.execGlobal = (exports.exec = void 0));

Object.defineProperty(exports, "parse", {
  enumerable: true,

  get: function() {
    return _pattern.parse;
  }
});

(exports.test = void 0);
var _peekerate = _interopRequireDefault(require("iter-tools-es/methods/peekerate"));
var _consume = _interopRequireDefault(require("iter-tools-es/methods/consume"));
var _api = require("./api");
var _engine = require("./internal/engine");
var _pattern = require("./pattern");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

const { exec, test, execGlobal } = new _api.Api(function* generate(
  pattern,
  iterable,
) {
  const engine = new _engine.Engine(pattern);
  let peekr = (0, _peekerate.default)(iterable);

  try {
    engine.feed(null);

    while (!peekr.done) {
      engine.feed(peekr.value);

      yield* engine.traverse0();

      engine.traverse1();

      if (engine.done) {
        break;
      } else {
        peekr = peekr.advance();
      }
    }

    if (peekr.done) {
      engine.feed(null);

      yield* engine.traverse0();
    }
  } finally {
    peekr.return();
  }
});

exports.execGlobal = execGlobal;
exports.test = test;
exports.exec = exec;

const warmupPattern1 = (0, _pattern.parse)('.*', 'g');
const warmupPattern2 = (0, _pattern.parse)('(a)|(b)', 'g');

// Help avoid deopts when the setup and body of generate and step0 are hot
// but code to do with pattern or input termination is not
for (let i = 0; i < 4; i++) {
  (0, _consume.default)(execGlobal(warmupPattern1, 'ab'));
  (0, _consume.default)(execGlobal(warmupPattern2, 'ab'));
  (0, _consume.default)(execGlobal(warmupPattern2, 'a'));
  (0, _consume.default)(execGlobal(warmupPattern2, ''));
}
